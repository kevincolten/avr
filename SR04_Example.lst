
SR04_Example.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__ctors_end>
   4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
   8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
   c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  40:	0c 94 0b 03 	jmp	0x616	; 0x616 <__vector_16>
  44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  48:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__vector_18>
  4c:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__vector_19>
  50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 00       	nop
  6c:	23 00       	.word	0x0023	; ????
  6e:	26 00       	.word	0x0026	; ????
  70:	29 00       	.word	0x0029	; ????

00000072 <port_to_mode_PGM>:
  72:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000007c <port_to_output_PGM>:
  7c:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000086 <digital_pin_to_port_PGM>:
  86:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  96:	03 03 03 03                                         ....

0000009a <digital_pin_to_bit_mask_PGM>:
  9a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  aa:	04 08 10 20                                         ... 

000000ae <digital_pin_to_timer_PGM>:
  ae:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
  be:	00 00 00 00                                         ....

000000c2 <__ctors_start>:
  c2:	3f 05       	cpc	r19, r15

000000c4 <__ctors_end>:
  c4:	11 24       	eor	r1, r1
  c6:	1f be       	out	0x3f, r1	; 63
  c8:	cf ef       	ldi	r28, 0xFF	; 255
  ca:	d8 e0       	ldi	r29, 0x08	; 8
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
  d0:	11 e0       	ldi	r17, 0x01	; 1
  d2:	a0 e0       	ldi	r26, 0x00	; 0
  d4:	b1 e0       	ldi	r27, 0x01	; 1
  d6:	e4 e1       	ldi	r30, 0x14	; 20
  d8:	fe e0       	ldi	r31, 0x0E	; 14
  da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x10>
  dc:	05 90       	lpm	r0, Z+
  de:	0d 92       	st	X+, r0
  e0:	ac 32       	cpi	r26, 0x2C	; 44
  e2:	b1 07       	cpc	r27, r17
  e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0xc>

000000e6 <__do_clear_bss>:
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	ac e2       	ldi	r26, 0x2C	; 44
  ea:	b1 e0       	ldi	r27, 0x01	; 1
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
  ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
  f0:	aa 3d       	cpi	r26, 0xDA	; 218
  f2:	b2 07       	cpc	r27, r18
  f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>

000000f6 <__do_global_ctors>:
  f6:	10 e0       	ldi	r17, 0x00	; 0
  f8:	c2 e6       	ldi	r28, 0x62	; 98
  fa:	d0 e0       	ldi	r29, 0x00	; 0
  fc:	04 c0       	rjmp	.+8      	; 0x106 <__do_global_ctors+0x10>
  fe:	21 97       	sbiw	r28, 0x01	; 1
 100:	fe 01       	movw	r30, r28
 102:	0e 94 ee 06 	call	0xddc	; 0xddc <__tablejump2__>
 106:	c1 36       	cpi	r28, 0x61	; 97
 108:	d1 07       	cpc	r29, r17
 10a:	c9 f7       	brne	.-14     	; 0xfe <__do_global_ctors+0x8>
 10c:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <main>
 110:	0c 94 08 07 	jmp	0xe10	; 0xe10 <_exit>

00000114 <__bad_interrupt>:
 114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	fc 01       	movw	r30, r24
 11c:	e2 55       	subi	r30, 0x52	; 82
 11e:	ff 4f       	sbci	r31, 0xFF	; 255
 120:	24 91       	lpm	r18, Z
	uint8_t bit = digitalPinToBitMask(pin);
 122:	fc 01       	movw	r30, r24
 124:	e6 56       	subi	r30, 0x66	; 102
 126:	ff 4f       	sbci	r31, 0xFF	; 255
 128:	34 91       	lpm	r19, Z
	uint8_t port = digitalPinToPort(pin);
 12a:	fc 01       	movw	r30, r24
 12c:	ea 57       	subi	r30, 0x7A	; 122
 12e:	ff 4f       	sbci	r31, 0xFF	; 255
 130:	e4 91       	lpm	r30, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 132:	ee 23       	and	r30, r30
 134:	09 f4       	brne	.+2      	; 0x138 <digitalWrite+0x20>
 136:	3c c0       	rjmp	.+120    	; 0x1b0 <digitalWrite+0x98>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 138:	22 23       	and	r18, r18
 13a:	39 f1       	breq	.+78     	; 0x18a <digitalWrite+0x72>
	switch (timer)
 13c:	23 30       	cpi	r18, 0x03	; 3
 13e:	91 f0       	breq	.+36     	; 0x164 <digitalWrite+0x4c>
 140:	38 f4       	brcc	.+14     	; 0x150 <digitalWrite+0x38>
 142:	21 30       	cpi	r18, 0x01	; 1
 144:	a9 f0       	breq	.+42     	; 0x170 <digitalWrite+0x58>
 146:	22 30       	cpi	r18, 0x02	; 2
 148:	01 f5       	brne	.+64     	; 0x18a <digitalWrite+0x72>
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 14a:	84 b5       	in	r24, 0x24	; 36
 14c:	8f 7d       	andi	r24, 0xDF	; 223
 14e:	12 c0       	rjmp	.+36     	; 0x174 <digitalWrite+0x5c>
	switch (timer)
 150:	27 30       	cpi	r18, 0x07	; 7
 152:	91 f0       	breq	.+36     	; 0x178 <digitalWrite+0x60>
 154:	28 30       	cpi	r18, 0x08	; 8
 156:	a1 f0       	breq	.+40     	; 0x180 <digitalWrite+0x68>
 158:	24 30       	cpi	r18, 0x04	; 4
 15a:	b9 f4       	brne	.+46     	; 0x18a <digitalWrite+0x72>
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 15c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 160:	8f 7d       	andi	r24, 0xDF	; 223
 162:	03 c0       	rjmp	.+6      	; 0x16a <digitalWrite+0x52>
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 164:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 168:	8f 77       	andi	r24, 0x7F	; 127
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 16a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 16e:	0d c0       	rjmp	.+26     	; 0x18a <digitalWrite+0x72>
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 170:	84 b5       	in	r24, 0x24	; 36
 172:	8f 77       	andi	r24, 0x7F	; 127
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 174:	84 bd       	out	0x24, r24	; 36
 176:	09 c0       	rjmp	.+18     	; 0x18a <digitalWrite+0x72>
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 178:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 17c:	8f 77       	andi	r24, 0x7F	; 127
 17e:	03 c0       	rjmp	.+6      	; 0x186 <digitalWrite+0x6e>
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 180:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 184:	8f 7d       	andi	r24, 0xDF	; 223
 186:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>

	out = portOutputRegister(port);
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	ee 0f       	add	r30, r30
 18e:	ff 1f       	adc	r31, r31
 190:	e4 58       	subi	r30, 0x84	; 132
 192:	ff 4f       	sbci	r31, 0xFF	; 255
 194:	a5 91       	lpm	r26, Z+
 196:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 198:	9f b7       	in	r25, 0x3f	; 63
	cli();
 19a:	f8 94       	cli

	if (val == LOW) {
 19c:	61 11       	cpse	r22, r1
 19e:	04 c0       	rjmp	.+8      	; 0x1a8 <digitalWrite+0x90>
		*out &= ~bit;
 1a0:	8c 91       	ld	r24, X
 1a2:	30 95       	com	r19
 1a4:	38 23       	and	r19, r24
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <digitalWrite+0x94>
	} else {
		*out |= bit;
 1a8:	ec 91       	ld	r30, X
 1aa:	3e 2b       	or	r19, r30
 1ac:	3c 93       	st	X, r19
	}

	SREG = oldSREG;
 1ae:	9f bf       	out	0x3f, r25	; 63
 1b0:	08 95       	ret

000001b2 <pinMode>:
{
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	fc 01       	movw	r30, r24
 1ba:	e6 56       	subi	r30, 0x66	; 102
 1bc:	ff 4f       	sbci	r31, 0xFF	; 255
 1be:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 1c0:	fc 01       	movw	r30, r24
 1c2:	ea 57       	subi	r30, 0x7A	; 122
 1c4:	ff 4f       	sbci	r31, 0xFF	; 255
 1c6:	84 91       	lpm	r24, Z
	if (port == NOT_A_PIN) return;
 1c8:	88 23       	and	r24, r24
 1ca:	61 f1       	breq	.+88     	; 0x224 <pinMode+0x72>
	reg = portModeRegister(port);
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	fc 01       	movw	r30, r24
 1d4:	ee 58       	subi	r30, 0x8E	; 142
 1d6:	ff 4f       	sbci	r31, 0xFF	; 255
 1d8:	c5 91       	lpm	r28, Z+
 1da:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 1dc:	fc 01       	movw	r30, r24
 1de:	e4 58       	subi	r30, 0x84	; 132
 1e0:	ff 4f       	sbci	r31, 0xFF	; 255
 1e2:	a5 91       	lpm	r26, Z+
 1e4:	b4 91       	lpm	r27, Z
	if (mode == INPUT) { 
 1e6:	61 11       	cpse	r22, r1
 1e8:	09 c0       	rjmp	.+18     	; 0x1fc <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 1ea:	9f b7       	in	r25, 0x3f	; 63
                cli();
 1ec:	f8 94       	cli
		*reg &= ~bit;
 1ee:	88 81       	ld	r24, Y
 1f0:	20 95       	com	r18
 1f2:	82 23       	and	r24, r18
 1f4:	88 83       	st	Y, r24
		*out &= ~bit;
 1f6:	ec 91       	ld	r30, X
 1f8:	2e 23       	and	r18, r30
 1fa:	0b c0       	rjmp	.+22     	; 0x212 <pinMode+0x60>
	} else if (mode == INPUT_PULLUP) {
 1fc:	62 30       	cpi	r22, 0x02	; 2
 1fe:	61 f4       	brne	.+24     	; 0x218 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 200:	9f b7       	in	r25, 0x3f	; 63
                cli();
 202:	f8 94       	cli
		*reg &= ~bit;
 204:	88 81       	ld	r24, Y
 206:	32 2f       	mov	r19, r18
 208:	30 95       	com	r19
 20a:	83 23       	and	r24, r19
 20c:	88 83       	st	Y, r24
		*out |= bit;
 20e:	ec 91       	ld	r30, X
 210:	2e 2b       	or	r18, r30
 212:	2c 93       	st	X, r18
		SREG = oldSREG;
 214:	9f bf       	out	0x3f, r25	; 63
 216:	06 c0       	rjmp	.+12     	; 0x224 <pinMode+0x72>
		uint8_t oldSREG = SREG;
 218:	8f b7       	in	r24, 0x3f	; 63
                cli();
 21a:	f8 94       	cli
		*reg |= bit;
 21c:	e8 81       	ld	r30, Y
 21e:	2e 2b       	or	r18, r30
 220:	28 83       	st	Y, r18
		SREG = oldSREG;
 222:	8f bf       	out	0x3f, r24	; 63
}
 224:	df 91       	pop	r29
 226:	cf 91       	pop	r28
 228:	08 95       	ret

0000022a <micros>:
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 22a:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
 22c:	f8 94       	cli
	m = timer0_overflow_count;
 22e:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <timer0_overflow_count>
 232:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <timer0_overflow_count+0x1>
 236:	a0 91 3b 01 	lds	r26, 0x013B	; 0x80013b <timer0_overflow_count+0x2>
 23a:	b0 91 3c 01 	lds	r27, 0x013C	; 0x80013c <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
 23e:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 240:	a8 9b       	sbis	0x15, 0	; 21
 242:	05 c0       	rjmp	.+10     	; 0x24e <micros+0x24>
 244:	2f 3f       	cpi	r18, 0xFF	; 255
 246:	19 f0       	breq	.+6      	; 0x24e <micros+0x24>
		m++;
 248:	01 96       	adiw	r24, 0x01	; 1
 24a:	a1 1d       	adc	r26, r1
 24c:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 24e:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
 250:	ba 2f       	mov	r27, r26
 252:	a9 2f       	mov	r26, r25
 254:	98 2f       	mov	r25, r24
 256:	88 27       	eor	r24, r24
 258:	82 0f       	add	r24, r18
 25a:	91 1d       	adc	r25, r1
 25c:	a1 1d       	adc	r26, r1
 25e:	b1 1d       	adc	r27, r1
 260:	bc 01       	movw	r22, r24
 262:	cd 01       	movw	r24, r26
 264:	42 e0       	ldi	r20, 0x02	; 2
 266:	66 0f       	add	r22, r22
 268:	77 1f       	adc	r23, r23
 26a:	88 1f       	adc	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	4a 95       	dec	r20
 270:	d1 f7       	brne	.-12     	; 0x266 <micros+0x3c>
}
 272:	08 95       	ret

00000274 <delay>:

void delay(unsigned long ms)
{
 274:	8f 92       	push	r8
 276:	9f 92       	push	r9
 278:	af 92       	push	r10
 27a:	bf 92       	push	r11
 27c:	cf 92       	push	r12
 27e:	df 92       	push	r13
 280:	ef 92       	push	r14
 282:	ff 92       	push	r15
 284:	6b 01       	movw	r12, r22
 286:	7c 01       	movw	r14, r24
	uint32_t start = micros();
 288:	0e 94 15 01 	call	0x22a	; 0x22a <micros>
 28c:	4b 01       	movw	r8, r22
 28e:	5c 01       	movw	r10, r24

	while (ms > 0) {
 290:	c1 14       	cp	r12, r1
 292:	d1 04       	cpc	r13, r1
 294:	e1 04       	cpc	r14, r1
 296:	f1 04       	cpc	r15, r1
 298:	f1 f0       	breq	.+60     	; 0x2d6 <delay+0x62>
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
 29a:	0e 94 15 01 	call	0x22a	; 0x22a <micros>
 29e:	dc 01       	movw	r26, r24
 2a0:	cb 01       	movw	r24, r22
 2a2:	88 19       	sub	r24, r8
 2a4:	99 09       	sbc	r25, r9
 2a6:	aa 09       	sbc	r26, r10
 2a8:	bb 09       	sbc	r27, r11
 2aa:	88 3e       	cpi	r24, 0xE8	; 232
 2ac:	93 40       	sbci	r25, 0x03	; 3
 2ae:	a1 05       	cpc	r26, r1
 2b0:	b1 05       	cpc	r27, r1
 2b2:	70 f3       	brcs	.-36     	; 0x290 <delay+0x1c>
			ms--;
 2b4:	21 e0       	ldi	r18, 0x01	; 1
 2b6:	c2 1a       	sub	r12, r18
 2b8:	d1 08       	sbc	r13, r1
 2ba:	e1 08       	sbc	r14, r1
 2bc:	f1 08       	sbc	r15, r1
			start += 1000;
 2be:	88 ee       	ldi	r24, 0xE8	; 232
 2c0:	88 0e       	add	r8, r24
 2c2:	83 e0       	ldi	r24, 0x03	; 3
 2c4:	98 1e       	adc	r9, r24
 2c6:	a1 1c       	adc	r10, r1
 2c8:	b1 1c       	adc	r11, r1
		while ( ms > 0 && (micros() - start) >= 1000) {
 2ca:	c1 14       	cp	r12, r1
 2cc:	d1 04       	cpc	r13, r1
 2ce:	e1 04       	cpc	r14, r1
 2d0:	f1 04       	cpc	r15, r1
 2d2:	19 f7       	brne	.-58     	; 0x29a <delay+0x26>
 2d4:	dd cf       	rjmp	.-70     	; 0x290 <delay+0x1c>
		}
	}
}
 2d6:	ff 90       	pop	r15
 2d8:	ef 90       	pop	r14
 2da:	df 90       	pop	r13
 2dc:	cf 90       	pop	r12
 2de:	bf 90       	pop	r11
 2e0:	af 90       	pop	r10
 2e2:	9f 90       	pop	r9
 2e4:	8f 90       	pop	r8
 2e6:	08 95       	ret

000002e8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 2e8:	cf 92       	push	r12
 2ea:	df 92       	push	r13
 2ec:	ef 92       	push	r14
 2ee:	ff 92       	push	r15
 2f0:	0f 93       	push	r16
 2f2:	1f 93       	push	r17
 2f4:	cf 93       	push	r28
 2f6:	df 93       	push	r29
 2f8:	6c 01       	movw	r12, r24
 2fa:	7a 01       	movw	r14, r20
 2fc:	8b 01       	movw	r16, r22
  size_t n = 0;
 2fe:	c0 e0       	ldi	r28, 0x00	; 0
 300:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
 302:	ce 15       	cp	r28, r14
 304:	df 05       	cpc	r29, r15
 306:	81 f0       	breq	.+32     	; 0x328 <_ZN5Print5writeEPKhj+0x40>
    if (write(*buffer++)) n++;
 308:	d8 01       	movw	r26, r16
 30a:	6d 91       	ld	r22, X+
 30c:	8d 01       	movw	r16, r26
 30e:	d6 01       	movw	r26, r12
 310:	ed 91       	ld	r30, X+
 312:	fc 91       	ld	r31, X
 314:	01 90       	ld	r0, Z+
 316:	f0 81       	ld	r31, Z
 318:	e0 2d       	mov	r30, r0
 31a:	c6 01       	movw	r24, r12
 31c:	09 95       	icall
 31e:	89 2b       	or	r24, r25
 320:	11 f0       	breq	.+4      	; 0x326 <_ZN5Print5writeEPKhj+0x3e>
 322:	21 96       	adiw	r28, 0x01	; 1
 324:	ee cf       	rjmp	.-36     	; 0x302 <_ZN5Print5writeEPKhj+0x1a>
 326:	7e 01       	movw	r14, r28
    else break;
  }
  return n;
}
 328:	c7 01       	movw	r24, r14
 32a:	df 91       	pop	r29
 32c:	cf 91       	pop	r28
 32e:	1f 91       	pop	r17
 330:	0f 91       	pop	r16
 332:	ff 90       	pop	r15
 334:	ef 90       	pop	r14
 336:	df 90       	pop	r13
 338:	cf 90       	pop	r12
 33a:	08 95       	ret

0000033c <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
 33c:	08 95       	ret

0000033e <_ZN5Print17availableForWriteEv>:
    virtual int availableForWrite() { return 0; }
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	08 95       	ret

00000344 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
 344:	fc 01       	movw	r30, r24
 346:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
 348:	44 8d       	ldd	r20, Z+28	; 0x1c
 34a:	25 2f       	mov	r18, r21
 34c:	30 e0       	ldi	r19, 0x00	; 0
 34e:	84 2f       	mov	r24, r20
 350:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 352:	82 1b       	sub	r24, r18
 354:	93 0b       	sbc	r25, r19
 356:	54 17       	cp	r21, r20
 358:	10 f0       	brcs	.+4      	; 0x35e <_ZN14HardwareSerial17availableForWriteEv+0x1a>
 35a:	cf 96       	adiw	r24, 0x3f	; 63
 35c:	08 95       	ret
  return tail - head - 1;
 35e:	01 97       	sbiw	r24, 0x01	; 1
}
 360:	08 95       	ret

00000362 <_ZN14HardwareSerial4readEv>:
{
 362:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 364:	91 8d       	ldd	r25, Z+25	; 0x19
 366:	82 8d       	ldd	r24, Z+26	; 0x1a
 368:	98 17       	cp	r25, r24
 36a:	61 f0       	breq	.+24     	; 0x384 <_ZN14HardwareSerial4readEv+0x22>
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 36c:	82 8d       	ldd	r24, Z+26	; 0x1a
 36e:	df 01       	movw	r26, r30
 370:	a8 0f       	add	r26, r24
 372:	b1 1d       	adc	r27, r1
 374:	5d 96       	adiw	r26, 0x1d	; 29
 376:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 378:	92 8d       	ldd	r25, Z+26	; 0x1a
 37a:	9f 5f       	subi	r25, 0xFF	; 255
 37c:	9f 73       	andi	r25, 0x3F	; 63
 37e:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	08 95       	ret
    return -1;
 384:	8f ef       	ldi	r24, 0xFF	; 255
 386:	9f ef       	ldi	r25, 0xFF	; 255
}
 388:	08 95       	ret

0000038a <_ZN14HardwareSerial4peekEv>:
{
 38a:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 38c:	91 8d       	ldd	r25, Z+25	; 0x19
 38e:	82 8d       	ldd	r24, Z+26	; 0x1a
 390:	98 17       	cp	r25, r24
 392:	31 f0       	breq	.+12     	; 0x3a0 <_ZN14HardwareSerial4peekEv+0x16>
    return _rx_buffer[_rx_buffer_tail];
 394:	82 8d       	ldd	r24, Z+26	; 0x1a
 396:	e8 0f       	add	r30, r24
 398:	f1 1d       	adc	r31, r1
 39a:	85 8d       	ldd	r24, Z+29	; 0x1d
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	08 95       	ret
    return -1;
 3a0:	8f ef       	ldi	r24, 0xFF	; 255
 3a2:	9f ef       	ldi	r25, 0xFF	; 255
}
 3a4:	08 95       	ret

000003a6 <_ZN14HardwareSerial9availableEv>:
{
 3a6:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 3a8:	91 8d       	ldd	r25, Z+25	; 0x19
 3aa:	22 8d       	ldd	r18, Z+26	; 0x1a
 3ac:	89 2f       	mov	r24, r25
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	80 5c       	subi	r24, 0xC0	; 192
 3b2:	9f 4f       	sbci	r25, 0xFF	; 255
 3b4:	82 1b       	sub	r24, r18
 3b6:	91 09       	sbc	r25, r1
}
 3b8:	8f 73       	andi	r24, 0x3F	; 63
 3ba:	99 27       	eor	r25, r25
 3bc:	08 95       	ret

000003be <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 3be:	8d e3       	ldi	r24, 0x3D	; 61
 3c0:	91 e0       	ldi	r25, 0x01	; 1
 3c2:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <_ZN14HardwareSerial9availableEv>
 3c6:	21 e0       	ldi	r18, 0x01	; 1
 3c8:	89 2b       	or	r24, r25
 3ca:	09 f4       	brne	.+2      	; 0x3ce <_Z17Serial0_availablev+0x10>
 3cc:	20 e0       	ldi	r18, 0x00	; 0
}
 3ce:	82 2f       	mov	r24, r18
 3d0:	08 95       	ret

000003d2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
{
 3d2:	fc 01       	movw	r30, r24
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 3d4:	84 8d       	ldd	r24, Z+28	; 0x1c
 3d6:	df 01       	movw	r26, r30
 3d8:	a8 0f       	add	r26, r24
 3da:	b1 1d       	adc	r27, r1
 3dc:	a3 5a       	subi	r26, 0xA3	; 163
 3de:	bf 4f       	sbci	r27, 0xFF	; 255
 3e0:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 3e2:	84 8d       	ldd	r24, Z+28	; 0x1c
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	01 96       	adiw	r24, 0x01	; 1
 3e8:	8f 73       	andi	r24, 0x3F	; 63
 3ea:	99 27       	eor	r25, r25
 3ec:	84 8f       	std	Z+28, r24	; 0x1c
  *_udr = c;
 3ee:	a6 89       	ldd	r26, Z+22	; 0x16
 3f0:	b7 89       	ldd	r27, Z+23	; 0x17
 3f2:	2c 93       	st	X, r18
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
 3f4:	a0 89       	ldd	r26, Z+16	; 0x10
 3f6:	b1 89       	ldd	r27, Z+17	; 0x11
 3f8:	8c 91       	ld	r24, X
 3fa:	83 70       	andi	r24, 0x03	; 3
 3fc:	80 64       	ori	r24, 0x40	; 64
 3fe:	8c 93       	st	X, r24
  if (_tx_buffer_head == _tx_buffer_tail) {
 400:	93 8d       	ldd	r25, Z+27	; 0x1b
 402:	84 8d       	ldd	r24, Z+28	; 0x1c
 404:	98 13       	cpse	r25, r24
 406:	06 c0       	rjmp	.+12     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
    cbi(*_ucsrb, UDRIE0);
 408:	02 88       	ldd	r0, Z+18	; 0x12
 40a:	f3 89       	ldd	r31, Z+19	; 0x13
 40c:	e0 2d       	mov	r30, r0
 40e:	80 81       	ld	r24, Z
 410:	8f 7d       	andi	r24, 0xDF	; 223
 412:	80 83       	st	Z, r24
 414:	08 95       	ret

00000416 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 416:	ef 92       	push	r14
 418:	ff 92       	push	r15
 41a:	0f 93       	push	r16
 41c:	1f 93       	push	r17
 41e:	cf 93       	push	r28
 420:	df 93       	push	r29
 422:	ec 01       	movw	r28, r24
  _written = true;
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 428:	9b 8d       	ldd	r25, Y+27	; 0x1b
 42a:	8c 8d       	ldd	r24, Y+28	; 0x1c
 42c:	98 13       	cpse	r25, r24
 42e:	05 c0       	rjmp	.+10     	; 0x43a <_ZN14HardwareSerial5writeEh+0x24>
 430:	e8 89       	ldd	r30, Y+16	; 0x10
 432:	f9 89       	ldd	r31, Y+17	; 0x11
 434:	80 81       	ld	r24, Z
 436:	85 fd       	sbrc	r24, 5
 438:	26 c0       	rjmp	.+76     	; 0x486 <_ZN14HardwareSerial5writeEh+0x70>
 43a:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 43c:	0b 8d       	ldd	r16, Y+27	; 0x1b
 43e:	10 e0       	ldi	r17, 0x00	; 0
 440:	0f 5f       	subi	r16, 0xFF	; 255
 442:	1f 4f       	sbci	r17, 0xFF	; 255
 444:	0f 73       	andi	r16, 0x3F	; 63
 446:	11 27       	eor	r17, r17
 448:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 44a:	8c 8d       	ldd	r24, Y+28	; 0x1c
 44c:	e8 12       	cpse	r14, r24
 44e:	0c c0       	rjmp	.+24     	; 0x468 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 450:	0f b6       	in	r0, 0x3f	; 63
 452:	07 fc       	sbrc	r0, 7
 454:	fa cf       	rjmp	.-12     	; 0x44a <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 456:	e8 89       	ldd	r30, Y+16	; 0x10
 458:	f9 89       	ldd	r31, Y+17	; 0x11
 45a:	80 81       	ld	r24, Z
 45c:	85 ff       	sbrs	r24, 5
 45e:	f5 cf       	rjmp	.-22     	; 0x44a <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 460:	ce 01       	movw	r24, r28
 462:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 466:	f1 cf       	rjmp	.-30     	; 0x44a <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 468:	8b 8d       	ldd	r24, Y+27	; 0x1b
 46a:	fe 01       	movw	r30, r28
 46c:	e8 0f       	add	r30, r24
 46e:	f1 1d       	adc	r31, r1
 470:	e3 5a       	subi	r30, 0xA3	; 163
 472:	ff 4f       	sbci	r31, 0xFF	; 255
 474:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 476:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 478:	f8 94       	cli
    _tx_buffer_head = i;
 47a:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
 47c:	ea 89       	ldd	r30, Y+18	; 0x12
 47e:	fb 89       	ldd	r31, Y+19	; 0x13
 480:	80 81       	ld	r24, Z
 482:	80 62       	ori	r24, 0x20	; 32
 484:	0a c0       	rjmp	.+20     	; 0x49a <_ZN14HardwareSerial5writeEh+0x84>
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 486:	9f b7       	in	r25, 0x3f	; 63
 488:	f8 94       	cli
      *_udr = c;
 48a:	ee 89       	ldd	r30, Y+22	; 0x16
 48c:	ff 89       	ldd	r31, Y+23	; 0x17
 48e:	60 83       	st	Z, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
 490:	e8 89       	ldd	r30, Y+16	; 0x10
 492:	f9 89       	ldd	r31, Y+17	; 0x11
 494:	80 81       	ld	r24, Z
 496:	83 70       	andi	r24, 0x03	; 3
 498:	80 64       	ori	r24, 0x40	; 64
 49a:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 49c:	9f bf       	out	0x3f, r25	; 63
  }
  
  return 1;
}
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	df 91       	pop	r29
 4a4:	cf 91       	pop	r28
 4a6:	1f 91       	pop	r17
 4a8:	0f 91       	pop	r16
 4aa:	ff 90       	pop	r15
 4ac:	ef 90       	pop	r14
 4ae:	08 95       	ret

000004b0 <_ZN14HardwareSerial5flushEv>:
{
 4b0:	cf 93       	push	r28
 4b2:	df 93       	push	r29
 4b4:	ec 01       	movw	r28, r24
  if (!_written)
 4b6:	88 8d       	ldd	r24, Y+24	; 0x18
 4b8:	88 23       	and	r24, r24
 4ba:	c9 f0       	breq	.+50     	; 0x4ee <_ZN14HardwareSerial5flushEv+0x3e>
  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 4bc:	ea 89       	ldd	r30, Y+18	; 0x12
 4be:	fb 89       	ldd	r31, Y+19	; 0x13
 4c0:	80 81       	ld	r24, Z
 4c2:	85 fd       	sbrc	r24, 5
 4c4:	05 c0       	rjmp	.+10     	; 0x4d0 <_ZN14HardwareSerial5flushEv+0x20>
 4c6:	a8 89       	ldd	r26, Y+16	; 0x10
 4c8:	b9 89       	ldd	r27, Y+17	; 0x11
 4ca:	8c 91       	ld	r24, X
 4cc:	86 fd       	sbrc	r24, 6
 4ce:	0f c0       	rjmp	.+30     	; 0x4ee <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 4d0:	0f b6       	in	r0, 0x3f	; 63
 4d2:	07 fc       	sbrc	r0, 7
 4d4:	f5 cf       	rjmp	.-22     	; 0x4c0 <_ZN14HardwareSerial5flushEv+0x10>
 4d6:	80 81       	ld	r24, Z
 4d8:	85 ff       	sbrs	r24, 5
 4da:	f2 cf       	rjmp	.-28     	; 0x4c0 <_ZN14HardwareSerial5flushEv+0x10>
	if (bit_is_set(*_ucsra, UDRE0))
 4dc:	a8 89       	ldd	r26, Y+16	; 0x10
 4de:	b9 89       	ldd	r27, Y+17	; 0x11
 4e0:	8c 91       	ld	r24, X
 4e2:	85 ff       	sbrs	r24, 5
 4e4:	ed cf       	rjmp	.-38     	; 0x4c0 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 4e6:	ce 01       	movw	r24, r28
 4e8:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 4ec:	e7 cf       	rjmp	.-50     	; 0x4bc <_ZN14HardwareSerial5flushEv+0xc>
}
 4ee:	df 91       	pop	r29
 4f0:	cf 91       	pop	r28
 4f2:	08 95       	ret

000004f4 <_Z14serialEventRunv>:
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	89 2b       	or	r24, r25
 4fa:	29 f0       	breq	.+10     	; 0x506 <_Z14serialEventRunv+0x12>
 4fc:	0e 94 df 01 	call	0x3be	; 0x3be <_Z17Serial0_availablev>
 500:	81 11       	cpse	r24, r1
 502:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 506:	08 95       	ret

00000508 <_ZN5Print5writeEPKc.constprop.13>:
      if (str == NULL) return 0;
 508:	00 97       	sbiw	r24, 0x00	; 0
 50a:	69 f0       	breq	.+26     	; 0x526 <_ZN5Print5writeEPKc.constprop.13+0x1e>
      return write((const uint8_t *)str, strlen(str));
 50c:	fc 01       	movw	r30, r24
 50e:	01 90       	ld	r0, Z+
 510:	00 20       	and	r0, r0
 512:	e9 f7       	brne	.-6      	; 0x50e <_ZN5Print5writeEPKc.constprop.13+0x6>
 514:	31 97       	sbiw	r30, 0x01	; 1
 516:	af 01       	movw	r20, r30
 518:	48 1b       	sub	r20, r24
 51a:	59 0b       	sbc	r21, r25
 51c:	bc 01       	movw	r22, r24
 51e:	8d e3       	ldi	r24, 0x3D	; 61
 520:	91 e0       	ldi	r25, 0x01	; 1
 522:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <_ZN5Print5writeEPKhj>
    }
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	08 95       	ret

0000052c <_ZN5Print5printEli.constprop.8>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
 52c:	8f 92       	push	r8
 52e:	9f 92       	push	r9
 530:	af 92       	push	r10
 532:	bf 92       	push	r11
 534:	cf 92       	push	r12
 536:	df 92       	push	r13
 538:	ef 92       	push	r14
 53a:	ff 92       	push	r15
 53c:	0f 93       	push	r16
 53e:	1f 93       	push	r17
 540:	cf 93       	push	r28
 542:	df 93       	push	r29
 544:	cd b7       	in	r28, 0x3d	; 61
 546:	de b7       	in	r29, 0x3e	; 62
 548:	a1 97       	sbiw	r28, 0x21	; 33
 54a:	0f b6       	in	r0, 0x3f	; 63
 54c:	f8 94       	cli
 54e:	de bf       	out	0x3e, r29	; 62
 550:	0f be       	out	0x3f, r0	; 63
 552:	cd bf       	out	0x3d, r28	; 61
 554:	6b 01       	movw	r12, r22
 556:	7c 01       	movw	r14, r24
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
 558:	97 ff       	sbrs	r25, 7
 55a:	2b c0       	rjmp	.+86     	; 0x5b2 <_ZN5Print5printEli.constprop.8+0x86>
  return write(c);
 55c:	6d e2       	ldi	r22, 0x2D	; 45
 55e:	8d e3       	ldi	r24, 0x3D	; 61
 560:	91 e0       	ldi	r25, 0x01	; 1
 562:	0e 94 0b 02 	call	0x416	; 0x416 <_ZN14HardwareSerial5writeEh>
 566:	8c 01       	movw	r16, r24
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
 568:	22 27       	eor	r18, r18
 56a:	33 27       	eor	r19, r19
 56c:	a9 01       	movw	r20, r18
 56e:	2c 19       	sub	r18, r12
 570:	3d 09       	sbc	r19, r13
 572:	4e 09       	sbc	r20, r14
 574:	5f 09       	sbc	r21, r15
size_t Print::printNumber(unsigned long n, uint8_t base)
{
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 576:	19 a2       	std	Y+33, r1	; 0x21
 578:	ce 01       	movw	r24, r28
 57a:	81 96       	adiw	r24, 0x21	; 33
 57c:	7c 01       	movw	r14, r24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    char c = n % base;
 57e:	9a e0       	ldi	r25, 0x0A	; 10
 580:	89 2e       	mov	r8, r25
 582:	91 2c       	mov	r9, r1
 584:	a1 2c       	mov	r10, r1
 586:	b1 2c       	mov	r11, r1
    n /= base;
 588:	ca 01       	movw	r24, r20
 58a:	b9 01       	movw	r22, r18
 58c:	a5 01       	movw	r20, r10
 58e:	94 01       	movw	r18, r8
 590:	0e 94 a2 06 	call	0xd44	; 0xd44 <__udivmodsi4>

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 594:	60 5d       	subi	r22, 0xD0	; 208
 596:	f7 01       	movw	r30, r14
 598:	62 93       	st	-Z, r22
 59a:	7f 01       	movw	r14, r30
  do {
 59c:	21 15       	cp	r18, r1
 59e:	31 05       	cpc	r19, r1
 5a0:	41 05       	cpc	r20, r1
 5a2:	51 05       	cpc	r21, r1
 5a4:	89 f7       	brne	.-30     	; 0x588 <_ZN5Print5printEli.constprop.8+0x5c>
  } while(n);

  return write(str);
 5a6:	cf 01       	movw	r24, r30
 5a8:	0e 94 84 02 	call	0x508	; 0x508 <_ZN5Print5writeEPKc.constprop.13>
      return printNumber(n, 10) + t;
 5ac:	80 0f       	add	r24, r16
 5ae:	91 1f       	adc	r25, r17
 5b0:	1d c0       	rjmp	.+58     	; 0x5ec <_ZN5Print5printEli.constprop.8+0xc0>
    return printNumber(n, 10);
 5b2:	9b 01       	movw	r18, r22
 5b4:	ac 01       	movw	r20, r24
  *str = '\0';
 5b6:	19 a2       	std	Y+33, r1	; 0x21
 5b8:	8e 01       	movw	r16, r28
 5ba:	0f 5d       	subi	r16, 0xDF	; 223
 5bc:	1f 4f       	sbci	r17, 0xFF	; 255
    char c = n % base;
 5be:	8a e0       	ldi	r24, 0x0A	; 10
 5c0:	c8 2e       	mov	r12, r24
 5c2:	d1 2c       	mov	r13, r1
 5c4:	e1 2c       	mov	r14, r1
 5c6:	f1 2c       	mov	r15, r1
    n /= base;
 5c8:	ca 01       	movw	r24, r20
 5ca:	b9 01       	movw	r22, r18
 5cc:	a7 01       	movw	r20, r14
 5ce:	96 01       	movw	r18, r12
 5d0:	0e 94 a2 06 	call	0xd44	; 0xd44 <__udivmodsi4>
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 5d4:	60 5d       	subi	r22, 0xD0	; 208
 5d6:	f8 01       	movw	r30, r16
 5d8:	62 93       	st	-Z, r22
 5da:	8f 01       	movw	r16, r30
  do {
 5dc:	21 15       	cp	r18, r1
 5de:	31 05       	cpc	r19, r1
 5e0:	41 05       	cpc	r20, r1
 5e2:	51 05       	cpc	r21, r1
 5e4:	89 f7       	brne	.-30     	; 0x5c8 <_ZN5Print5printEli.constprop.8+0x9c>
  return write(str);
 5e6:	cf 01       	movw	r24, r30
 5e8:	0e 94 84 02 	call	0x508	; 0x508 <_ZN5Print5writeEPKc.constprop.13>
}
 5ec:	a1 96       	adiw	r28, 0x21	; 33
 5ee:	0f b6       	in	r0, 0x3f	; 63
 5f0:	f8 94       	cli
 5f2:	de bf       	out	0x3e, r29	; 62
 5f4:	0f be       	out	0x3f, r0	; 63
 5f6:	cd bf       	out	0x3d, r28	; 61
 5f8:	df 91       	pop	r29
 5fa:	cf 91       	pop	r28
 5fc:	1f 91       	pop	r17
 5fe:	0f 91       	pop	r16
 600:	ff 90       	pop	r15
 602:	ef 90       	pop	r14
 604:	df 90       	pop	r13
 606:	cf 90       	pop	r12
 608:	bf 90       	pop	r11
 60a:	af 90       	pop	r10
 60c:	9f 90       	pop	r9
 60e:	8f 90       	pop	r8
 610:	08 95       	ret

00000612 <__cxa_pure_virtual>:
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
 612:	0e 94 03 07 	call	0xe06	; 0xe06 <abort>

00000616 <__vector_16>:
{
 616:	1f 92       	push	r1
 618:	0f 92       	push	r0
 61a:	0f b6       	in	r0, 0x3f	; 63
 61c:	0f 92       	push	r0
 61e:	11 24       	eor	r1, r1
 620:	2f 93       	push	r18
 622:	3f 93       	push	r19
 624:	8f 93       	push	r24
 626:	9f 93       	push	r25
 628:	af 93       	push	r26
 62a:	bf 93       	push	r27
	unsigned long m = timer0_millis;
 62c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <timer0_millis>
 630:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <timer0_millis+0x1>
 634:	a0 91 37 01 	lds	r26, 0x0137	; 0x800137 <timer0_millis+0x2>
 638:	b0 91 38 01 	lds	r27, 0x0138	; 0x800138 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
 63c:	30 91 34 01 	lds	r19, 0x0134	; 0x800134 <timer0_fract>
	f += FRACT_INC;
 640:	23 e0       	ldi	r18, 0x03	; 3
 642:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
 644:	2d 37       	cpi	r18, 0x7D	; 125
 646:	20 f4       	brcc	.+8      	; 0x650 <__vector_16+0x3a>
	m += MILLIS_INC;
 648:	01 96       	adiw	r24, 0x01	; 1
 64a:	a1 1d       	adc	r26, r1
 64c:	b1 1d       	adc	r27, r1
 64e:	05 c0       	rjmp	.+10     	; 0x65a <__vector_16+0x44>
		f -= FRACT_MAX;
 650:	26 e8       	ldi	r18, 0x86	; 134
 652:	23 0f       	add	r18, r19
		m += 1;
 654:	02 96       	adiw	r24, 0x02	; 2
 656:	a1 1d       	adc	r26, r1
 658:	b1 1d       	adc	r27, r1
	timer0_fract = f;
 65a:	20 93 34 01 	sts	0x0134, r18	; 0x800134 <timer0_fract>
	timer0_millis = m;
 65e:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <timer0_millis>
 662:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <timer0_millis+0x1>
 666:	a0 93 37 01 	sts	0x0137, r26	; 0x800137 <timer0_millis+0x2>
 66a:	b0 93 38 01 	sts	0x0138, r27	; 0x800138 <timer0_millis+0x3>
	timer0_overflow_count++;
 66e:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <timer0_overflow_count>
 672:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <timer0_overflow_count+0x1>
 676:	a0 91 3b 01 	lds	r26, 0x013B	; 0x80013b <timer0_overflow_count+0x2>
 67a:	b0 91 3c 01 	lds	r27, 0x013C	; 0x80013c <timer0_overflow_count+0x3>
 67e:	01 96       	adiw	r24, 0x01	; 1
 680:	a1 1d       	adc	r26, r1
 682:	b1 1d       	adc	r27, r1
 684:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <timer0_overflow_count>
 688:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <timer0_overflow_count+0x1>
 68c:	a0 93 3b 01 	sts	0x013B, r26	; 0x80013b <timer0_overflow_count+0x2>
 690:	b0 93 3c 01 	sts	0x013C, r27	; 0x80013c <timer0_overflow_count+0x3>
}
 694:	bf 91       	pop	r27
 696:	af 91       	pop	r26
 698:	9f 91       	pop	r25
 69a:	8f 91       	pop	r24
 69c:	3f 91       	pop	r19
 69e:	2f 91       	pop	r18
 6a0:	0f 90       	pop	r0
 6a2:	0f be       	out	0x3f, r0	; 63
 6a4:	0f 90       	pop	r0
 6a6:	1f 90       	pop	r1
 6a8:	18 95       	reti

000006aa <__vector_19>:
{
 6aa:	1f 92       	push	r1
 6ac:	0f 92       	push	r0
 6ae:	0f b6       	in	r0, 0x3f	; 63
 6b0:	0f 92       	push	r0
 6b2:	11 24       	eor	r1, r1
 6b4:	2f 93       	push	r18
 6b6:	3f 93       	push	r19
 6b8:	4f 93       	push	r20
 6ba:	5f 93       	push	r21
 6bc:	6f 93       	push	r22
 6be:	7f 93       	push	r23
 6c0:	8f 93       	push	r24
 6c2:	9f 93       	push	r25
 6c4:	af 93       	push	r26
 6c6:	bf 93       	push	r27
 6c8:	ef 93       	push	r30
 6ca:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 6cc:	8d e3       	ldi	r24, 0x3D	; 61
 6ce:	91 e0       	ldi	r25, 0x01	; 1
 6d0:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 6d4:	ff 91       	pop	r31
 6d6:	ef 91       	pop	r30
 6d8:	bf 91       	pop	r27
 6da:	af 91       	pop	r26
 6dc:	9f 91       	pop	r25
 6de:	8f 91       	pop	r24
 6e0:	7f 91       	pop	r23
 6e2:	6f 91       	pop	r22
 6e4:	5f 91       	pop	r21
 6e6:	4f 91       	pop	r20
 6e8:	3f 91       	pop	r19
 6ea:	2f 91       	pop	r18
 6ec:	0f 90       	pop	r0
 6ee:	0f be       	out	0x3f, r0	; 63
 6f0:	0f 90       	pop	r0
 6f2:	1f 90       	pop	r1
 6f4:	18 95       	reti

000006f6 <__vector_18>:
  {
 6f6:	1f 92       	push	r1
 6f8:	0f 92       	push	r0
 6fa:	0f b6       	in	r0, 0x3f	; 63
 6fc:	0f 92       	push	r0
 6fe:	11 24       	eor	r1, r1
 700:	2f 93       	push	r18
 702:	8f 93       	push	r24
 704:	9f 93       	push	r25
 706:	ef 93       	push	r30
 708:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 70a:	e0 91 4d 01 	lds	r30, 0x014D	; 0x80014d <Serial+0x10>
 70e:	f0 91 4e 01 	lds	r31, 0x014E	; 0x80014e <Serial+0x11>
 712:	80 81       	ld	r24, Z
 714:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <Serial+0x16>
 718:	f0 91 54 01 	lds	r31, 0x0154	; 0x800154 <Serial+0x17>
 71c:	82 fd       	sbrc	r24, 2
 71e:	12 c0       	rjmp	.+36     	; 0x744 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 720:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 722:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <Serial+0x19>
 726:	8f 5f       	subi	r24, 0xFF	; 255
 728:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 72a:	20 91 57 01 	lds	r18, 0x0157	; 0x800157 <Serial+0x1a>
 72e:	82 17       	cp	r24, r18
 730:	51 f0       	breq	.+20     	; 0x746 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 732:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <Serial+0x19>
 736:	f0 e0       	ldi	r31, 0x00	; 0
 738:	e3 5c       	subi	r30, 0xC3	; 195
 73a:	fe 4f       	sbci	r31, 0xFE	; 254
 73c:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 73e:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <Serial+0x19>
 742:	01 c0       	rjmp	.+2      	; 0x746 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 744:	80 81       	ld	r24, Z
  }
 746:	ff 91       	pop	r31
 748:	ef 91       	pop	r30
 74a:	9f 91       	pop	r25
 74c:	8f 91       	pop	r24
 74e:	2f 91       	pop	r18
 750:	0f 90       	pop	r0
 752:	0f be       	out	0x3f, r0	; 63
 754:	0f 90       	pop	r0
 756:	1f 90       	pop	r1
 758:	18 95       	reti

0000075a <countPulseASM>:

countPulseASM:

.LM0:
.LFBB1:
    push r12   ;   ;  130 pushqi1/1 [length = 1]
 75a:	cf 92       	push	r12
    push r13   ;   ;  131 pushqi1/1 [length = 1]
 75c:	df 92       	push	r13
    push r14   ;   ;  132 pushqi1/1 [length = 1]
 75e:	ef 92       	push	r14
    push r15   ;   ;  133 pushqi1/1 [length = 1]
 760:	ff 92       	push	r15
    push r16   ;   ;  134 pushqi1/1 [length = 1]
 762:	0f 93       	push	r16
    push r17   ;   ;  135 pushqi1/1 [length = 1]
 764:	1f 93       	push	r17
/* prologue: function */
/* frame size = 0 */
/* stack size = 6 */
.L__stack_usage = 6
    mov r30,r24  ;  port, port   ;  2 *movhi/1  [length = 2]
 766:	e8 2f       	mov	r30, r24
    mov r31,r25  ;  port, port
 768:	f9 2f       	mov	r31, r25
/*     unsigned long width = 0;
***     // wait for any previous pulse to end
***     while ((*port & bit) == stateMask)
*/
.LM1:
    rjmp .L2   ;   ;  181 jump  [length = 1]
 76a:	05 c0       	rjmp	.+10     	; 0x776 <countPulseASM+0x1c>
.L4:
/*         if (--maxloops == 0) */
.LM2:
    subi r16,1   ;  maxloops,  ;  17  addsi3/2  [length = 4]
 76c:	01 50       	subi	r16, 0x01	; 1
    sbc r17, r1   ;  maxloops
 76e:	11 09       	sbc	r17, r1
    sbc r18, r1   ;  maxloops
 770:	21 09       	sbc	r18, r1
    sbc r19, r1   ;  maxloops
 772:	31 09       	sbc	r19, r1
    breq .L13  ; ,   ;  19  branch  [length = 1]
 774:	61 f1       	breq	.+88     	; 0x7ce <countPulseASM+0x74>
.L2:
/*         if (--maxloops == 0) */
.LM3:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  22  movqi_insn/4  [length = 1]
 776:	90 81       	ld	r25, Z
    and r25,r22  ;  D.1554, bit  ;  24  andqi3/1  [length = 1]
 778:	96 23       	and	r25, r22
    cp r25,r20   ;  D.1554, stateMask  ;  25  *cmpqi/2  [length = 1]
 77a:	94 17       	cp	r25, r20
    breq .L4   ; ,   ;  26  branch  [length = 1]
 77c:	b9 f3       	breq	.-18     	; 0x76c <countPulseASM+0x12>
    rjmp .L6   ;   ;  184 jump  [length = 1]
 77e:	05 c0       	rjmp	.+10     	; 0x78a <countPulseASM+0x30>
***     // wait for the pulse to start
***     while ((*port & bit) != stateMask)
***         if (--maxloops == 0)
*/
.LM4:
    subi r16,1   ;  maxloops,  ;  31  addsi3/2  [length = 4]
 780:	01 50       	subi	r16, 0x01	; 1
    sbc r17, r1   ;  maxloops
 782:	11 09       	sbc	r17, r1
    sbc r18, r1   ;  maxloops
 784:	21 09       	sbc	r18, r1
    sbc r19, r1   ;  maxloops
 786:	31 09       	sbc	r19, r1
    breq .L13  ; ,   ;  33  branch  [length = 1]
 788:	11 f1       	breq	.+68     	; 0x7ce <countPulseASM+0x74>
.L6:
/*         if (--maxloops == 0) */
.LM5:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  41  movqi_insn/4  [length = 1]
 78a:	90 81       	ld	r25, Z
    and r25,r22  ;  D.1554, bit  ;  43  andqi3/1  [length = 1]
 78c:	96 23       	and	r25, r22
    cpse r25,r20   ;  D.1554, stateMask  ;  44  enable_interrupt-3  [length = 1]
 78e:	94 13       	cpse	r25, r20
    rjmp .L7   ;
 790:	f7 cf       	rjmp	.-18     	; 0x780 <countPulseASM+0x26>
    mov r12, r1   ;  width  ;  7 *movsi/2  [length = 4]
 792:	c1 2c       	mov	r12, r1
    mov r13, r1   ;  width
 794:	d1 2c       	mov	r13, r1
    mov r14, r1   ;  width
 796:	e1 2c       	mov	r14, r1
    mov r15, r1   ;  width
 798:	f1 2c       	mov	r15, r1
    rjmp .L9   ;   ;  186 jump  [length = 1]
 79a:	0a c0       	rjmp	.+20     	; 0x7b0 <countPulseASM+0x56>
***     // wait for the pulse to stop
***     while ((*port & bit) == stateMask) {
***         if (++width == maxloops)
*/
.LM6:
    ldi r24,-1   ; ,   ;  50  addsi3/3  [length = 5]
 79c:	8f ef       	ldi	r24, 0xFF	; 255
    sub r12,r24  ;  width,
 79e:	c8 1a       	sub	r12, r24
    sbc r13,r24  ;  width,
 7a0:	d8 0a       	sbc	r13, r24
    sbc r14,r24  ;  width,
 7a2:	e8 0a       	sbc	r14, r24
    sbc r15,r24  ;  width,
 7a4:	f8 0a       	sbc	r15, r24
    cp r16,r12   ;  maxloops, width  ;  51  *cmpsi/2  [length = 4]
 7a6:	0c 15       	cp	r16, r12
    cpc r17,r13  ;  maxloops, width
 7a8:	1d 05       	cpc	r17, r13
    cpc r18,r14  ;  maxloops, width
 7aa:	2e 05       	cpc	r18, r14
    cpc r19,r15  ;  maxloops, width
 7ac:	3f 05       	cpc	r19, r15
    breq .L13  ; ,   ;  52  branch  [length = 1]
 7ae:	79 f0       	breq	.+30     	; 0x7ce <countPulseASM+0x74>
.L9:
/*         if (++width == maxloops) */
.LM7:
    ld r24,Z   ;  D.1554, *port_7(D)   ;  60  movqi_insn/4  [length = 1]
 7b0:	80 81       	ld	r24, Z
    and r24,r22  ;  D.1554, bit  ;  62  andqi3/1  [length = 1]
 7b2:	86 23       	and	r24, r22
    cp r24,r20   ;  D.1554, stateMask  ;  63  *cmpqi/2  [length = 1]
 7b4:	84 17       	cp	r24, r20
    breq .L10  ; ,   ;  64  branch  [length = 1]
 7b6:	91 f3       	breq	.-28     	; 0x79c <countPulseASM+0x42>
/*             return 0;
***     }
***     return width;
*/
.LM8:
    mov r22,r12  ;  D.1553, width  ;  108 movqi_insn/1  [length = 1]
 7b8:	6c 2d       	mov	r22, r12
    mov r23,r13  ;  D.1553, width  ;  109 movqi_insn/1  [length = 1]
 7ba:	7d 2d       	mov	r23, r13
    mov r24,r14  ;  D.1553, width  ;  110 movqi_insn/1  [length = 1]
 7bc:	8e 2d       	mov	r24, r14
    mov r25,r15  ;  D.1553, width  ;  111 movqi_insn/1  [length = 1]
 7be:	9f 2d       	mov	r25, r15
/* epilogue start */
.LM9:
    pop r17  ;   ;  171 popqi [length = 1]
 7c0:	1f 91       	pop	r17
    pop r16  ;   ;  172 popqi [length = 1]
 7c2:	0f 91       	pop	r16
    pop r15  ;   ;  173 popqi [length = 1]
 7c4:	ff 90       	pop	r15
    pop r14  ;   ;  174 popqi [length = 1]
 7c6:	ef 90       	pop	r14
    pop r13  ;   ;  175 popqi [length = 1]
 7c8:	df 90       	pop	r13
    pop r12  ;   ;  176 popqi [length = 1]
 7ca:	cf 90       	pop	r12
    ret  ;  177 return_from_epilogue  [length = 1]
 7cc:	08 95       	ret
.L13:
.LM10:
    ldi r22,0  ;  D.1553   ;  120 movqi_insn/1  [length = 1]
 7ce:	60 e0       	ldi	r22, 0x00	; 0
    ldi r23,0  ;  D.1553   ;  121 movqi_insn/1  [length = 1]
 7d0:	70 e0       	ldi	r23, 0x00	; 0
    ldi r24,0  ;  D.1553   ;  122 movqi_insn/1  [length = 1]
 7d2:	80 e0       	ldi	r24, 0x00	; 0
    ldi r25,0  ;  D.1553   ;  123 movqi_insn/1  [length = 1]
 7d4:	90 e0       	ldi	r25, 0x00	; 0
/* epilogue start */
.LM11:
    pop r17  ;   ;  138 popqi [length = 1]
 7d6:	1f 91       	pop	r17
    pop r16  ;   ;  139 popqi [length = 1]
 7d8:	0f 91       	pop	r16
    pop r15  ;   ;  140 popqi [length = 1]
 7da:	ff 90       	pop	r15
    pop r14  ;   ;  141 popqi [length = 1]
 7dc:	ef 90       	pop	r14
    pop r13  ;   ;  142 popqi [length = 1]
 7de:	df 90       	pop	r13
    pop r12  ;   ;  143 popqi [length = 1]
 7e0:	cf 90       	pop	r12
    ret  ;  144 return_from_epilogue  [length = 1]
 7e2:	08 95       	ret

000007e4 <main>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 7e4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 7e6:	84 b5       	in	r24, 0x24	; 36
 7e8:	82 60       	ori	r24, 0x02	; 2
 7ea:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 7ec:	84 b5       	in	r24, 0x24	; 36
 7ee:	81 60       	ori	r24, 0x01	; 1
 7f0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 7f2:	85 b5       	in	r24, 0x25	; 37
 7f4:	82 60       	ori	r24, 0x02	; 2
 7f6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 7f8:	85 b5       	in	r24, 0x25	; 37
 7fa:	81 60       	ori	r24, 0x01	; 1
 7fc:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 7fe:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
 802:	81 60       	ori	r24, 0x01	; 1
 804:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 808:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 80c:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 810:	82 60       	ori	r24, 0x02	; 2
 812:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 816:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 81a:	81 60       	ori	r24, 0x01	; 1
 81c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 820:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 824:	81 60       	ori	r24, 0x01	; 1
 826:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 82a:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 82e:	84 60       	ori	r24, 0x04	; 4
 830:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 834:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 838:	81 60       	ori	r24, 0x01	; 1
 83a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 83e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 842:	84 60       	ori	r24, 0x04	; 4
 844:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
		sbi(ADCSRA, ADPS1);
 848:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 84c:	82 60       	ori	r24, 0x02	; 2
 84e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
		sbi(ADCSRA, ADPS0);
 852:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 856:	81 60       	ori	r24, 0x01	; 1
 858:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 85c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 860:	80 68       	ori	r24, 0x80	; 128
 862:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 866:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  *_ucsra = 1 << U2X0;
 86a:	e0 91 4d 01 	lds	r30, 0x014D	; 0x80014d <Serial+0x10>
 86e:	f0 91 4e 01 	lds	r31, 0x014E	; 0x80014e <Serial+0x11>
 872:	82 e0       	ldi	r24, 0x02	; 2
 874:	80 83       	st	Z, r24
  *_ubrrh = baud_setting >> 8;
 876:	e0 91 49 01 	lds	r30, 0x0149	; 0x800149 <Serial+0xc>
 87a:	f0 91 4a 01 	lds	r31, 0x014A	; 0x80014a <Serial+0xd>
 87e:	10 82       	st	Z, r1
  *_ubrrl = baud_setting;
 880:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <Serial+0xe>
 884:	f0 91 4c 01 	lds	r31, 0x014C	; 0x80014c <Serial+0xf>
 888:	8f ec       	ldi	r24, 0xCF	; 207
 88a:	80 83       	st	Z, r24
  _written = false;
 88c:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <Serial+0x18>
  *_ucsrc = config;
 890:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <Serial+0x14>
 894:	f0 91 52 01 	lds	r31, 0x0152	; 0x800152 <Serial+0x15>
 898:	86 e0       	ldi	r24, 0x06	; 6
 89a:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXEN0);
 89c:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <Serial+0x12>
 8a0:	f0 91 50 01 	lds	r31, 0x0150	; 0x800150 <Serial+0x13>
 8a4:	80 81       	ld	r24, Z
 8a6:	80 61       	ori	r24, 0x10	; 16
 8a8:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 8aa:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <Serial+0x12>
 8ae:	f0 91 50 01 	lds	r31, 0x0150	; 0x800150 <Serial+0x13>
 8b2:	80 81       	ld	r24, Z
 8b4:	88 60       	ori	r24, 0x08	; 8
 8b6:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 8b8:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <Serial+0x12>
 8bc:	f0 91 50 01 	lds	r31, 0x0150	; 0x800150 <Serial+0x13>
 8c0:	80 81       	ld	r24, Z
 8c2:	80 68       	ori	r24, 0x80	; 128
 8c4:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 8c6:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <Serial+0x12>
 8ca:	f0 91 50 01 	lds	r31, 0x0150	; 0x800150 <Serial+0x13>
 8ce:	80 81       	ld	r24, Z
 8d0:	8f 7d       	andi	r24, 0xDF	; 223
 8d2:	80 83       	st	Z, r24

void setup() {
  //Serial Port begin
  Serial.begin (9600);
  //Define inputs and outputs
  pinMode(trigPin, OUTPUT);
 8d4:	61 e0       	ldi	r22, 0x01	; 1
 8d6:	8b e0       	ldi	r24, 0x0B	; 11
 8d8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <pinMode>
  pinMode(echoPin, INPUT);
 8dc:	60 e0       	ldi	r22, 0x00	; 0
 8de:	8c e0       	ldi	r24, 0x0C	; 12
 8e0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <pinMode>
  // initialize digital pin LED_BUILTIN as an output.
  pinMode(LED_BUILTIN, OUTPUT);
 8e4:	61 e0       	ldi	r22, 0x01	; 1
 8e6:	8d e0       	ldi	r24, 0x0D	; 13
 8e8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <pinMode>
	__asm__ __volatile__ (
 8ec:	4f e0       	ldi	r20, 0x0F	; 15
 8ee:	24 2e       	mov	r2, r20
 8f0:	31 2c       	mov	r3, r1
 8f2:	c3 e2       	ldi	r28, 0x23	; 35
 8f4:	d0 e0       	ldi	r29, 0x00	; 0
  pinMode(echoPin, INPUT);
  duration = pulseIn(echoPin, HIGH);

  // Convert the time into a distance
  cm = (duration/2) / 29.1;     // Divide by 29.1 or multiply by 0.0343
  inches = (duration/2) / 74;   // Divide by 74 or multiply by 0.0135
 8f6:	54 e9       	ldi	r21, 0x94	; 148
 8f8:	85 2e       	mov	r8, r21
 8fa:	91 2c       	mov	r9, r1
 8fc:	a1 2c       	mov	r10, r1
 8fe:	b1 2c       	mov	r11, r1
  lightSpeed = inches * 10;
  if (lightSpeed > 250) lightSpeed = 250;
 900:	6a ef       	ldi	r22, 0xFA	; 250
 902:	46 2e       	mov	r4, r22
 904:	51 2c       	mov	r5, r1
 906:	61 2c       	mov	r6, r1
 908:	71 2c       	mov	r7, r1
  digitalWrite(trigPin, LOW);
 90a:	60 e0       	ldi	r22, 0x00	; 0
 90c:	8b e0       	ldi	r24, 0x0B	; 11
 90e:	0e 94 8c 00 	call	0x118	; 0x118 <digitalWrite>
 912:	c1 01       	movw	r24, r2
 914:	01 97       	sbiw	r24, 0x01	; 1
 916:	f1 f7       	brne	.-4      	; 0x914 <__stack+0x15>
  digitalWrite(trigPin, HIGH);
 918:	61 e0       	ldi	r22, 0x01	; 1
 91a:	8b e0       	ldi	r24, 0x0B	; 11
 91c:	0e 94 8c 00 	call	0x118	; 0x118 <digitalWrite>
 920:	ce 01       	movw	r24, r28
 922:	01 97       	sbiw	r24, 0x01	; 1
 924:	f1 f7       	brne	.-4      	; 0x922 <__stack+0x23>
  digitalWrite(trigPin, LOW);
 926:	60 e0       	ldi	r22, 0x00	; 0
 928:	8b e0       	ldi	r24, 0x0B	; 11
 92a:	0e 94 8c 00 	call	0x118	; 0x118 <digitalWrite>
  pinMode(echoPin, INPUT);
 92e:	60 e0       	ldi	r22, 0x00	; 0
 930:	8c e0       	ldi	r24, 0x0C	; 12
 932:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <pinMode>
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
{
	// cache the port and bit of the pin in order to speed up the
	// pulse width measuring loop and achieve finer resolution.  calling
	// digitalRead() instead yields much coarser resolution.
	uint8_t bit = digitalPinToBitMask(pin);
 936:	e6 ea       	ldi	r30, 0xA6	; 166
 938:	f0 e0       	ldi	r31, 0x00	; 0
 93a:	64 91       	lpm	r22, Z
	uint8_t port = digitalPinToPort(pin);
 93c:	e2 e9       	ldi	r30, 0x92	; 146
 93e:	f0 e0       	ldi	r31, 0x00	; 0
 940:	84 91       	lpm	r24, Z

	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes approximately 16 clock cycles per iteration
	unsigned long maxloops = microsecondsToClockCycles(timeout)/16;

	unsigned long width = countPulseASM(portInputRegister(port), bit, stateMask, maxloops);
 942:	e8 2f       	mov	r30, r24
 944:	f0 e0       	ldi	r31, 0x00	; 0
 946:	ee 0f       	add	r30, r30
 948:	ff 1f       	adc	r31, r31
 94a:	e8 59       	subi	r30, 0x98	; 152
 94c:	ff 4f       	sbci	r31, 0xFF	; 255
 94e:	85 91       	lpm	r24, Z+
 950:	94 91       	lpm	r25, Z
 952:	00 e4       	ldi	r16, 0x40	; 64
 954:	12 e4       	ldi	r17, 0x42	; 66
 956:	2f e0       	ldi	r18, 0x0F	; 15
 958:	30 e0       	ldi	r19, 0x00	; 0
 95a:	46 2f       	mov	r20, r22
 95c:	0e 94 ad 03 	call	0x75a	; 0x75a <countPulseASM>

	// prevent clockCyclesToMicroseconds to return bogus values if countPulseASM timed out
	if (width)
 960:	61 15       	cp	r22, r1
 962:	71 05       	cpc	r23, r1
 964:	81 05       	cpc	r24, r1
 966:	91 05       	cpc	r25, r1
 968:	51 f0       	breq	.+20     	; 0x97e <__stack+0x7f>
		return clockCyclesToMicroseconds(width * 16 + 16);
 96a:	dc 01       	movw	r26, r24
 96c:	cb 01       	movw	r24, r22
 96e:	01 96       	adiw	r24, 0x01	; 1
 970:	a1 1d       	adc	r26, r1
 972:	b1 1d       	adc	r27, r1
 974:	6c 01       	movw	r12, r24
 976:	7d 01       	movw	r14, r26
 978:	ff e0       	ldi	r31, 0x0F	; 15
 97a:	ff 22       	and	r15, r31
 97c:	03 c0       	rjmp	.+6      	; 0x984 <__stack+0x85>
	else
		return 0;
 97e:	c1 2c       	mov	r12, r1
 980:	d1 2c       	mov	r13, r1
 982:	76 01       	movw	r14, r12
  cm = (duration/2) / 29.1;     // Divide by 29.1 or multiply by 0.0343
 984:	c7 01       	movw	r24, r14
 986:	b6 01       	movw	r22, r12
 988:	95 95       	asr	r25
 98a:	87 95       	ror	r24
 98c:	77 95       	ror	r23
 98e:	67 95       	ror	r22
 990:	0e 94 16 06 	call	0xc2c	; 0xc2c <__floatsisf>
 994:	2d ec       	ldi	r18, 0xCD	; 205
 996:	3c ec       	ldi	r19, 0xCC	; 204
 998:	48 ee       	ldi	r20, 0xE8	; 232
 99a:	51 e4       	ldi	r21, 0x41	; 65
 99c:	0e 94 6c 05 	call	0xad8	; 0xad8 <__divsf3>
 9a0:	0e 94 de 05 	call	0xbbc	; 0xbbc <__fixsfsi>
 9a4:	60 93 30 01 	sts	0x0130, r22	; 0x800130 <cm>
 9a8:	70 93 31 01 	sts	0x0131, r23	; 0x800131 <cm+0x1>
 9ac:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <cm+0x2>
 9b0:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <cm+0x3>
  inches = (duration/2) / 74;   // Divide by 74 or multiply by 0.0135
 9b4:	c7 01       	movw	r24, r14
 9b6:	b6 01       	movw	r22, r12
 9b8:	a5 01       	movw	r20, r10
 9ba:	94 01       	movw	r18, r8
 9bc:	0e 94 c4 06 	call	0xd88	; 0xd88 <__divmodsi4>
 9c0:	69 01       	movw	r12, r18
 9c2:	7a 01       	movw	r14, r20
  lightSpeed = inches * 10;
 9c4:	aa e0       	ldi	r26, 0x0A	; 10
 9c6:	b0 e0       	ldi	r27, 0x00	; 0
 9c8:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__muluhisi3>
  if (lightSpeed > 250) lightSpeed = 250;
 9cc:	6b 3f       	cpi	r22, 0xFB	; 251
 9ce:	71 05       	cpc	r23, r1
 9d0:	81 05       	cpc	r24, r1
 9d2:	91 05       	cpc	r25, r1
 9d4:	4c f4       	brge	.+18     	; 0x9e8 <__stack+0xe9>
  lightSpeed = inches * 10;
 9d6:	60 93 2c 01 	sts	0x012C, r22	; 0x80012c <__data_end>
 9da:	70 93 2d 01 	sts	0x012D, r23	; 0x80012d <__data_end+0x1>
 9de:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end+0x2>
 9e2:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <__data_end+0x3>
 9e6:	08 c0       	rjmp	.+16     	; 0x9f8 <__stack+0xf9>
  if (lightSpeed > 250) lightSpeed = 250;
 9e8:	40 92 2c 01 	sts	0x012C, r4	; 0x80012c <__data_end>
 9ec:	50 92 2d 01 	sts	0x012D, r5	; 0x80012d <__data_end+0x1>
 9f0:	60 92 2e 01 	sts	0x012E, r6	; 0x80012e <__data_end+0x2>
 9f4:	70 92 2f 01 	sts	0x012F, r7	; 0x80012f <__data_end+0x3>
  Serial.print(inches);
 9f8:	c7 01       	movw	r24, r14
 9fa:	b6 01       	movw	r22, r12
 9fc:	0e 94 96 02 	call	0x52c	; 0x52c <_ZN5Print5printEli.constprop.8>
  return write(str);
 a00:	82 e1       	ldi	r24, 0x12	; 18
 a02:	91 e0       	ldi	r25, 0x01	; 1
 a04:	0e 94 84 02 	call	0x508	; 0x508 <_ZN5Print5writeEPKc.constprop.13>
  Serial.print("in, ");
  Serial.print(cm);
 a08:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <cm>
 a0c:	70 91 31 01 	lds	r23, 0x0131	; 0x800131 <cm+0x1>
 a10:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <cm+0x2>
 a14:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <cm+0x3>
 a18:	0e 94 96 02 	call	0x52c	; 0x52c <_ZN5Print5printEli.constprop.8>
 a1c:	87 e1       	ldi	r24, 0x17	; 23
 a1e:	91 e0       	ldi	r25, 0x01	; 1
 a20:	0e 94 84 02 	call	0x508	; 0x508 <_ZN5Print5writeEPKc.constprop.13>
 a24:	8c e1       	ldi	r24, 0x1C	; 28
 a26:	91 e0       	ldi	r25, 0x01	; 1
 a28:	0e 94 84 02 	call	0x508	; 0x508 <_ZN5Print5writeEPKc.constprop.13>
  Serial.print("cm, ");
  Serial.print("light speed ");
  Serial.print(lightSpeed);
 a2c:	60 91 2c 01 	lds	r22, 0x012C	; 0x80012c <__data_end>
 a30:	70 91 2d 01 	lds	r23, 0x012D	; 0x80012d <__data_end+0x1>
 a34:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end+0x2>
 a38:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <__data_end+0x3>
 a3c:	0e 94 96 02 	call	0x52c	; 0x52c <_ZN5Print5printEli.constprop.8>
  return write("\r\n");
 a40:	89 e2       	ldi	r24, 0x29	; 41
 a42:	91 e0       	ldi	r25, 0x01	; 1
 a44:	0e 94 84 02 	call	0x508	; 0x508 <_ZN5Print5writeEPKc.constprop.13>
  Serial.println();
  digitalWrite(LED_BUILTIN, HIGH);   // turn the LED on (HIGH is the voltage level)
 a48:	61 e0       	ldi	r22, 0x01	; 1
 a4a:	8d e0       	ldi	r24, 0x0D	; 13
 a4c:	0e 94 8c 00 	call	0x118	; 0x118 <digitalWrite>
  delay(lightSpeed);                       // wait for a second
 a50:	c0 90 2c 01 	lds	r12, 0x012C	; 0x80012c <__data_end>
 a54:	d0 90 2d 01 	lds	r13, 0x012D	; 0x80012d <__data_end+0x1>
 a58:	e0 90 2e 01 	lds	r14, 0x012E	; 0x80012e <__data_end+0x2>
 a5c:	f0 90 2f 01 	lds	r15, 0x012F	; 0x80012f <__data_end+0x3>
 a60:	c7 01       	movw	r24, r14
 a62:	b6 01       	movw	r22, r12
 a64:	0e 94 3a 01 	call	0x274	; 0x274 <delay>
  digitalWrite(LED_BUILTIN, LOW);    // turn the LED off by making the voltage LOW
 a68:	60 e0       	ldi	r22, 0x00	; 0
 a6a:	8d e0       	ldi	r24, 0x0D	; 13
 a6c:	0e 94 8c 00 	call	0x118	; 0x118 <digitalWrite>
  delay(lightSpeed);
 a70:	c7 01       	movw	r24, r14
 a72:	b6 01       	movw	r22, r12
 a74:	0e 94 3a 01 	call	0x274	; 0x274 <delay>
	
	setup();
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 a78:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <_Z14serialEventRunv>
 a7c:	46 cf       	rjmp	.-372    	; 0x90a <__stack+0xb>

00000a7e <_GLOBAL__sub_I___vector_18>:
    Print() : write_error(0) {}
 a7e:	ed e3       	ldi	r30, 0x3D	; 61
 a80:	f1 e0       	ldi	r31, 0x01	; 1
 a82:	13 82       	std	Z+3, r1	; 0x03
 a84:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 a86:	88 ee       	ldi	r24, 0xE8	; 232
 a88:	93 e0       	ldi	r25, 0x03	; 3
 a8a:	a0 e0       	ldi	r26, 0x00	; 0
 a8c:	b0 e0       	ldi	r27, 0x00	; 0
 a8e:	84 83       	std	Z+4, r24	; 0x04
 a90:	95 83       	std	Z+5, r25	; 0x05
 a92:	a6 83       	std	Z+6, r26	; 0x06
 a94:	b7 83       	std	Z+7, r27	; 0x07
    _tx_buffer_head(0), _tx_buffer_tail(0)
 a96:	84 e0       	ldi	r24, 0x04	; 4
 a98:	91 e0       	ldi	r25, 0x01	; 1
 a9a:	91 83       	std	Z+1, r25	; 0x01
 a9c:	80 83       	st	Z, r24
 a9e:	85 ec       	ldi	r24, 0xC5	; 197
 aa0:	90 e0       	ldi	r25, 0x00	; 0
 aa2:	95 87       	std	Z+13, r25	; 0x0d
 aa4:	84 87       	std	Z+12, r24	; 0x0c
 aa6:	84 ec       	ldi	r24, 0xC4	; 196
 aa8:	90 e0       	ldi	r25, 0x00	; 0
 aaa:	97 87       	std	Z+15, r25	; 0x0f
 aac:	86 87       	std	Z+14, r24	; 0x0e
 aae:	80 ec       	ldi	r24, 0xC0	; 192
 ab0:	90 e0       	ldi	r25, 0x00	; 0
 ab2:	91 8b       	std	Z+17, r25	; 0x11
 ab4:	80 8b       	std	Z+16, r24	; 0x10
 ab6:	81 ec       	ldi	r24, 0xC1	; 193
 ab8:	90 e0       	ldi	r25, 0x00	; 0
 aba:	93 8b       	std	Z+19, r25	; 0x13
 abc:	82 8b       	std	Z+18, r24	; 0x12
 abe:	82 ec       	ldi	r24, 0xC2	; 194
 ac0:	90 e0       	ldi	r25, 0x00	; 0
 ac2:	95 8b       	std	Z+21, r25	; 0x15
 ac4:	84 8b       	std	Z+20, r24	; 0x14
 ac6:	86 ec       	ldi	r24, 0xC6	; 198
 ac8:	90 e0       	ldi	r25, 0x00	; 0
 aca:	97 8b       	std	Z+23, r25	; 0x17
 acc:	86 8b       	std	Z+22, r24	; 0x16
 ace:	11 8e       	std	Z+25, r1	; 0x19
 ad0:	12 8e       	std	Z+26, r1	; 0x1a
 ad2:	13 8e       	std	Z+27, r1	; 0x1b
 ad4:	14 8e       	std	Z+28, r1	; 0x1c
 ad6:	08 95       	ret

00000ad8 <__divsf3>:
 ad8:	0e 94 80 05 	call	0xb00	; 0xb00 <__divsf3x>
 adc:	0c 94 68 06 	jmp	0xcd0	; 0xcd0 <__fp_round>
 ae0:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__fp_pscB>
 ae4:	58 f0       	brcs	.+22     	; 0xafc <__divsf3+0x24>
 ae6:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <__fp_pscA>
 aea:	40 f0       	brcs	.+16     	; 0xafc <__divsf3+0x24>
 aec:	29 f4       	brne	.+10     	; 0xaf8 <__divsf3+0x20>
 aee:	5f 3f       	cpi	r21, 0xFF	; 255
 af0:	29 f0       	breq	.+10     	; 0xafc <__divsf3+0x24>
 af2:	0c 94 51 06 	jmp	0xca2	; 0xca2 <__fp_inf>
 af6:	51 11       	cpse	r21, r1
 af8:	0c 94 9c 06 	jmp	0xd38	; 0xd38 <__fp_szero>
 afc:	0c 94 57 06 	jmp	0xcae	; 0xcae <__fp_nan>

00000b00 <__divsf3x>:
 b00:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__fp_split3>
 b04:	68 f3       	brcs	.-38     	; 0xae0 <__divsf3+0x8>

00000b06 <__divsf3_pse>:
 b06:	99 23       	and	r25, r25
 b08:	b1 f3       	breq	.-20     	; 0xaf6 <__divsf3+0x1e>
 b0a:	55 23       	and	r21, r21
 b0c:	91 f3       	breq	.-28     	; 0xaf2 <__divsf3+0x1a>
 b0e:	95 1b       	sub	r25, r21
 b10:	55 0b       	sbc	r21, r21
 b12:	bb 27       	eor	r27, r27
 b14:	aa 27       	eor	r26, r26
 b16:	62 17       	cp	r22, r18
 b18:	73 07       	cpc	r23, r19
 b1a:	84 07       	cpc	r24, r20
 b1c:	38 f0       	brcs	.+14     	; 0xb2c <__divsf3_pse+0x26>
 b1e:	9f 5f       	subi	r25, 0xFF	; 255
 b20:	5f 4f       	sbci	r21, 0xFF	; 255
 b22:	22 0f       	add	r18, r18
 b24:	33 1f       	adc	r19, r19
 b26:	44 1f       	adc	r20, r20
 b28:	aa 1f       	adc	r26, r26
 b2a:	a9 f3       	breq	.-22     	; 0xb16 <__divsf3_pse+0x10>
 b2c:	35 d0       	rcall	.+106    	; 0xb98 <__divsf3_pse+0x92>
 b2e:	0e 2e       	mov	r0, r30
 b30:	3a f0       	brmi	.+14     	; 0xb40 <__divsf3_pse+0x3a>
 b32:	e0 e8       	ldi	r30, 0x80	; 128
 b34:	32 d0       	rcall	.+100    	; 0xb9a <__divsf3_pse+0x94>
 b36:	91 50       	subi	r25, 0x01	; 1
 b38:	50 40       	sbci	r21, 0x00	; 0
 b3a:	e6 95       	lsr	r30
 b3c:	00 1c       	adc	r0, r0
 b3e:	ca f7       	brpl	.-14     	; 0xb32 <__divsf3_pse+0x2c>
 b40:	2b d0       	rcall	.+86     	; 0xb98 <__divsf3_pse+0x92>
 b42:	fe 2f       	mov	r31, r30
 b44:	29 d0       	rcall	.+82     	; 0xb98 <__divsf3_pse+0x92>
 b46:	66 0f       	add	r22, r22
 b48:	77 1f       	adc	r23, r23
 b4a:	88 1f       	adc	r24, r24
 b4c:	bb 1f       	adc	r27, r27
 b4e:	26 17       	cp	r18, r22
 b50:	37 07       	cpc	r19, r23
 b52:	48 07       	cpc	r20, r24
 b54:	ab 07       	cpc	r26, r27
 b56:	b0 e8       	ldi	r27, 0x80	; 128
 b58:	09 f0       	breq	.+2      	; 0xb5c <__divsf3_pse+0x56>
 b5a:	bb 0b       	sbc	r27, r27
 b5c:	80 2d       	mov	r24, r0
 b5e:	bf 01       	movw	r22, r30
 b60:	ff 27       	eor	r31, r31
 b62:	93 58       	subi	r25, 0x83	; 131
 b64:	5f 4f       	sbci	r21, 0xFF	; 255
 b66:	3a f0       	brmi	.+14     	; 0xb76 <__divsf3_pse+0x70>
 b68:	9e 3f       	cpi	r25, 0xFE	; 254
 b6a:	51 05       	cpc	r21, r1
 b6c:	78 f0       	brcs	.+30     	; 0xb8c <__divsf3_pse+0x86>
 b6e:	0c 94 51 06 	jmp	0xca2	; 0xca2 <__fp_inf>
 b72:	0c 94 9c 06 	jmp	0xd38	; 0xd38 <__fp_szero>
 b76:	5f 3f       	cpi	r21, 0xFF	; 255
 b78:	e4 f3       	brlt	.-8      	; 0xb72 <__divsf3_pse+0x6c>
 b7a:	98 3e       	cpi	r25, 0xE8	; 232
 b7c:	d4 f3       	brlt	.-12     	; 0xb72 <__divsf3_pse+0x6c>
 b7e:	86 95       	lsr	r24
 b80:	77 95       	ror	r23
 b82:	67 95       	ror	r22
 b84:	b7 95       	ror	r27
 b86:	f7 95       	ror	r31
 b88:	9f 5f       	subi	r25, 0xFF	; 255
 b8a:	c9 f7       	brne	.-14     	; 0xb7e <__divsf3_pse+0x78>
 b8c:	88 0f       	add	r24, r24
 b8e:	91 1d       	adc	r25, r1
 b90:	96 95       	lsr	r25
 b92:	87 95       	ror	r24
 b94:	97 f9       	bld	r25, 7
 b96:	08 95       	ret
 b98:	e1 e0       	ldi	r30, 0x01	; 1
 b9a:	66 0f       	add	r22, r22
 b9c:	77 1f       	adc	r23, r23
 b9e:	88 1f       	adc	r24, r24
 ba0:	bb 1f       	adc	r27, r27
 ba2:	62 17       	cp	r22, r18
 ba4:	73 07       	cpc	r23, r19
 ba6:	84 07       	cpc	r24, r20
 ba8:	ba 07       	cpc	r27, r26
 baa:	20 f0       	brcs	.+8      	; 0xbb4 <__divsf3_pse+0xae>
 bac:	62 1b       	sub	r22, r18
 bae:	73 0b       	sbc	r23, r19
 bb0:	84 0b       	sbc	r24, r20
 bb2:	ba 0b       	sbc	r27, r26
 bb4:	ee 1f       	adc	r30, r30
 bb6:	88 f7       	brcc	.-30     	; 0xb9a <__divsf3_pse+0x94>
 bb8:	e0 95       	com	r30
 bba:	08 95       	ret

00000bbc <__fixsfsi>:
 bbc:	0e 94 e5 05 	call	0xbca	; 0xbca <__fixunssfsi>
 bc0:	68 94       	set
 bc2:	b1 11       	cpse	r27, r1
 bc4:	0c 94 9c 06 	jmp	0xd38	; 0xd38 <__fp_szero>
 bc8:	08 95       	ret

00000bca <__fixunssfsi>:
 bca:	0e 94 81 06 	call	0xd02	; 0xd02 <__fp_splitA>
 bce:	88 f0       	brcs	.+34     	; 0xbf2 <__fixunssfsi+0x28>
 bd0:	9f 57       	subi	r25, 0x7F	; 127
 bd2:	98 f0       	brcs	.+38     	; 0xbfa <__fixunssfsi+0x30>
 bd4:	b9 2f       	mov	r27, r25
 bd6:	99 27       	eor	r25, r25
 bd8:	b7 51       	subi	r27, 0x17	; 23
 bda:	b0 f0       	brcs	.+44     	; 0xc08 <__fixunssfsi+0x3e>
 bdc:	e1 f0       	breq	.+56     	; 0xc16 <__fixunssfsi+0x4c>
 bde:	66 0f       	add	r22, r22
 be0:	77 1f       	adc	r23, r23
 be2:	88 1f       	adc	r24, r24
 be4:	99 1f       	adc	r25, r25
 be6:	1a f0       	brmi	.+6      	; 0xbee <__fixunssfsi+0x24>
 be8:	ba 95       	dec	r27
 bea:	c9 f7       	brne	.-14     	; 0xbde <__fixunssfsi+0x14>
 bec:	14 c0       	rjmp	.+40     	; 0xc16 <__fixunssfsi+0x4c>
 bee:	b1 30       	cpi	r27, 0x01	; 1
 bf0:	91 f0       	breq	.+36     	; 0xc16 <__fixunssfsi+0x4c>
 bf2:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fp_zero>
 bf6:	b1 e0       	ldi	r27, 0x01	; 1
 bf8:	08 95       	ret
 bfa:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <__fp_zero>
 bfe:	67 2f       	mov	r22, r23
 c00:	78 2f       	mov	r23, r24
 c02:	88 27       	eor	r24, r24
 c04:	b8 5f       	subi	r27, 0xF8	; 248
 c06:	39 f0       	breq	.+14     	; 0xc16 <__fixunssfsi+0x4c>
 c08:	b9 3f       	cpi	r27, 0xF9	; 249
 c0a:	cc f3       	brlt	.-14     	; 0xbfe <__fixunssfsi+0x34>
 c0c:	86 95       	lsr	r24
 c0e:	77 95       	ror	r23
 c10:	67 95       	ror	r22
 c12:	b3 95       	inc	r27
 c14:	d9 f7       	brne	.-10     	; 0xc0c <__fixunssfsi+0x42>
 c16:	3e f4       	brtc	.+14     	; 0xc26 <__fixunssfsi+0x5c>
 c18:	90 95       	com	r25
 c1a:	80 95       	com	r24
 c1c:	70 95       	com	r23
 c1e:	61 95       	neg	r22
 c20:	7f 4f       	sbci	r23, 0xFF	; 255
 c22:	8f 4f       	sbci	r24, 0xFF	; 255
 c24:	9f 4f       	sbci	r25, 0xFF	; 255
 c26:	08 95       	ret

00000c28 <__floatunsisf>:
 c28:	e8 94       	clt
 c2a:	09 c0       	rjmp	.+18     	; 0xc3e <__floatsisf+0x12>

00000c2c <__floatsisf>:
 c2c:	97 fb       	bst	r25, 7
 c2e:	3e f4       	brtc	.+14     	; 0xc3e <__floatsisf+0x12>
 c30:	90 95       	com	r25
 c32:	80 95       	com	r24
 c34:	70 95       	com	r23
 c36:	61 95       	neg	r22
 c38:	7f 4f       	sbci	r23, 0xFF	; 255
 c3a:	8f 4f       	sbci	r24, 0xFF	; 255
 c3c:	9f 4f       	sbci	r25, 0xFF	; 255
 c3e:	99 23       	and	r25, r25
 c40:	a9 f0       	breq	.+42     	; 0xc6c <__floatsisf+0x40>
 c42:	f9 2f       	mov	r31, r25
 c44:	96 e9       	ldi	r25, 0x96	; 150
 c46:	bb 27       	eor	r27, r27
 c48:	93 95       	inc	r25
 c4a:	f6 95       	lsr	r31
 c4c:	87 95       	ror	r24
 c4e:	77 95       	ror	r23
 c50:	67 95       	ror	r22
 c52:	b7 95       	ror	r27
 c54:	f1 11       	cpse	r31, r1
 c56:	f8 cf       	rjmp	.-16     	; 0xc48 <__floatsisf+0x1c>
 c58:	fa f4       	brpl	.+62     	; 0xc98 <__floatsisf+0x6c>
 c5a:	bb 0f       	add	r27, r27
 c5c:	11 f4       	brne	.+4      	; 0xc62 <__floatsisf+0x36>
 c5e:	60 ff       	sbrs	r22, 0
 c60:	1b c0       	rjmp	.+54     	; 0xc98 <__floatsisf+0x6c>
 c62:	6f 5f       	subi	r22, 0xFF	; 255
 c64:	7f 4f       	sbci	r23, 0xFF	; 255
 c66:	8f 4f       	sbci	r24, 0xFF	; 255
 c68:	9f 4f       	sbci	r25, 0xFF	; 255
 c6a:	16 c0       	rjmp	.+44     	; 0xc98 <__floatsisf+0x6c>
 c6c:	88 23       	and	r24, r24
 c6e:	11 f0       	breq	.+4      	; 0xc74 <__floatsisf+0x48>
 c70:	96 e9       	ldi	r25, 0x96	; 150
 c72:	11 c0       	rjmp	.+34     	; 0xc96 <__floatsisf+0x6a>
 c74:	77 23       	and	r23, r23
 c76:	21 f0       	breq	.+8      	; 0xc80 <__floatsisf+0x54>
 c78:	9e e8       	ldi	r25, 0x8E	; 142
 c7a:	87 2f       	mov	r24, r23
 c7c:	76 2f       	mov	r23, r22
 c7e:	05 c0       	rjmp	.+10     	; 0xc8a <__floatsisf+0x5e>
 c80:	66 23       	and	r22, r22
 c82:	71 f0       	breq	.+28     	; 0xca0 <__floatsisf+0x74>
 c84:	96 e8       	ldi	r25, 0x86	; 134
 c86:	86 2f       	mov	r24, r22
 c88:	70 e0       	ldi	r23, 0x00	; 0
 c8a:	60 e0       	ldi	r22, 0x00	; 0
 c8c:	2a f0       	brmi	.+10     	; 0xc98 <__floatsisf+0x6c>
 c8e:	9a 95       	dec	r25
 c90:	66 0f       	add	r22, r22
 c92:	77 1f       	adc	r23, r23
 c94:	88 1f       	adc	r24, r24
 c96:	da f7       	brpl	.-10     	; 0xc8e <__floatsisf+0x62>
 c98:	88 0f       	add	r24, r24
 c9a:	96 95       	lsr	r25
 c9c:	87 95       	ror	r24
 c9e:	97 f9       	bld	r25, 7
 ca0:	08 95       	ret

00000ca2 <__fp_inf>:
 ca2:	97 f9       	bld	r25, 7
 ca4:	9f 67       	ori	r25, 0x7F	; 127
 ca6:	80 e8       	ldi	r24, 0x80	; 128
 ca8:	70 e0       	ldi	r23, 0x00	; 0
 caa:	60 e0       	ldi	r22, 0x00	; 0
 cac:	08 95       	ret

00000cae <__fp_nan>:
 cae:	9f ef       	ldi	r25, 0xFF	; 255
 cb0:	80 ec       	ldi	r24, 0xC0	; 192
 cb2:	08 95       	ret

00000cb4 <__fp_pscA>:
 cb4:	00 24       	eor	r0, r0
 cb6:	0a 94       	dec	r0
 cb8:	16 16       	cp	r1, r22
 cba:	17 06       	cpc	r1, r23
 cbc:	18 06       	cpc	r1, r24
 cbe:	09 06       	cpc	r0, r25
 cc0:	08 95       	ret

00000cc2 <__fp_pscB>:
 cc2:	00 24       	eor	r0, r0
 cc4:	0a 94       	dec	r0
 cc6:	12 16       	cp	r1, r18
 cc8:	13 06       	cpc	r1, r19
 cca:	14 06       	cpc	r1, r20
 ccc:	05 06       	cpc	r0, r21
 cce:	08 95       	ret

00000cd0 <__fp_round>:
 cd0:	09 2e       	mov	r0, r25
 cd2:	03 94       	inc	r0
 cd4:	00 0c       	add	r0, r0
 cd6:	11 f4       	brne	.+4      	; 0xcdc <__fp_round+0xc>
 cd8:	88 23       	and	r24, r24
 cda:	52 f0       	brmi	.+20     	; 0xcf0 <__fp_round+0x20>
 cdc:	bb 0f       	add	r27, r27
 cde:	40 f4       	brcc	.+16     	; 0xcf0 <__fp_round+0x20>
 ce0:	bf 2b       	or	r27, r31
 ce2:	11 f4       	brne	.+4      	; 0xce8 <__fp_round+0x18>
 ce4:	60 ff       	sbrs	r22, 0
 ce6:	04 c0       	rjmp	.+8      	; 0xcf0 <__fp_round+0x20>
 ce8:	6f 5f       	subi	r22, 0xFF	; 255
 cea:	7f 4f       	sbci	r23, 0xFF	; 255
 cec:	8f 4f       	sbci	r24, 0xFF	; 255
 cee:	9f 4f       	sbci	r25, 0xFF	; 255
 cf0:	08 95       	ret

00000cf2 <__fp_split3>:
 cf2:	57 fd       	sbrc	r21, 7
 cf4:	90 58       	subi	r25, 0x80	; 128
 cf6:	44 0f       	add	r20, r20
 cf8:	55 1f       	adc	r21, r21
 cfa:	59 f0       	breq	.+22     	; 0xd12 <__fp_splitA+0x10>
 cfc:	5f 3f       	cpi	r21, 0xFF	; 255
 cfe:	71 f0       	breq	.+28     	; 0xd1c <__fp_splitA+0x1a>
 d00:	47 95       	ror	r20

00000d02 <__fp_splitA>:
 d02:	88 0f       	add	r24, r24
 d04:	97 fb       	bst	r25, 7
 d06:	99 1f       	adc	r25, r25
 d08:	61 f0       	breq	.+24     	; 0xd22 <__fp_splitA+0x20>
 d0a:	9f 3f       	cpi	r25, 0xFF	; 255
 d0c:	79 f0       	breq	.+30     	; 0xd2c <__fp_splitA+0x2a>
 d0e:	87 95       	ror	r24
 d10:	08 95       	ret
 d12:	12 16       	cp	r1, r18
 d14:	13 06       	cpc	r1, r19
 d16:	14 06       	cpc	r1, r20
 d18:	55 1f       	adc	r21, r21
 d1a:	f2 cf       	rjmp	.-28     	; 0xd00 <__fp_split3+0xe>
 d1c:	46 95       	lsr	r20
 d1e:	f1 df       	rcall	.-30     	; 0xd02 <__fp_splitA>
 d20:	08 c0       	rjmp	.+16     	; 0xd32 <__fp_splitA+0x30>
 d22:	16 16       	cp	r1, r22
 d24:	17 06       	cpc	r1, r23
 d26:	18 06       	cpc	r1, r24
 d28:	99 1f       	adc	r25, r25
 d2a:	f1 cf       	rjmp	.-30     	; 0xd0e <__fp_splitA+0xc>
 d2c:	86 95       	lsr	r24
 d2e:	71 05       	cpc	r23, r1
 d30:	61 05       	cpc	r22, r1
 d32:	08 94       	sec
 d34:	08 95       	ret

00000d36 <__fp_zero>:
 d36:	e8 94       	clt

00000d38 <__fp_szero>:
 d38:	bb 27       	eor	r27, r27
 d3a:	66 27       	eor	r22, r22
 d3c:	77 27       	eor	r23, r23
 d3e:	cb 01       	movw	r24, r22
 d40:	97 f9       	bld	r25, 7
 d42:	08 95       	ret

00000d44 <__udivmodsi4>:
 d44:	a1 e2       	ldi	r26, 0x21	; 33
 d46:	1a 2e       	mov	r1, r26
 d48:	aa 1b       	sub	r26, r26
 d4a:	bb 1b       	sub	r27, r27
 d4c:	fd 01       	movw	r30, r26
 d4e:	0d c0       	rjmp	.+26     	; 0xd6a <__udivmodsi4_ep>

00000d50 <__udivmodsi4_loop>:
 d50:	aa 1f       	adc	r26, r26
 d52:	bb 1f       	adc	r27, r27
 d54:	ee 1f       	adc	r30, r30
 d56:	ff 1f       	adc	r31, r31
 d58:	a2 17       	cp	r26, r18
 d5a:	b3 07       	cpc	r27, r19
 d5c:	e4 07       	cpc	r30, r20
 d5e:	f5 07       	cpc	r31, r21
 d60:	20 f0       	brcs	.+8      	; 0xd6a <__udivmodsi4_ep>
 d62:	a2 1b       	sub	r26, r18
 d64:	b3 0b       	sbc	r27, r19
 d66:	e4 0b       	sbc	r30, r20
 d68:	f5 0b       	sbc	r31, r21

00000d6a <__udivmodsi4_ep>:
 d6a:	66 1f       	adc	r22, r22
 d6c:	77 1f       	adc	r23, r23
 d6e:	88 1f       	adc	r24, r24
 d70:	99 1f       	adc	r25, r25
 d72:	1a 94       	dec	r1
 d74:	69 f7       	brne	.-38     	; 0xd50 <__udivmodsi4_loop>
 d76:	60 95       	com	r22
 d78:	70 95       	com	r23
 d7a:	80 95       	com	r24
 d7c:	90 95       	com	r25
 d7e:	9b 01       	movw	r18, r22
 d80:	ac 01       	movw	r20, r24
 d82:	bd 01       	movw	r22, r26
 d84:	cf 01       	movw	r24, r30
 d86:	08 95       	ret

00000d88 <__divmodsi4>:
 d88:	05 2e       	mov	r0, r21
 d8a:	97 fb       	bst	r25, 7
 d8c:	1e f4       	brtc	.+6      	; 0xd94 <__divmodsi4+0xc>
 d8e:	00 94       	com	r0
 d90:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__negsi2>
 d94:	57 fd       	sbrc	r21, 7
 d96:	07 d0       	rcall	.+14     	; 0xda6 <__divmodsi4_neg2>
 d98:	0e 94 a2 06 	call	0xd44	; 0xd44 <__udivmodsi4>
 d9c:	07 fc       	sbrc	r0, 7
 d9e:	03 d0       	rcall	.+6      	; 0xda6 <__divmodsi4_neg2>
 da0:	4e f4       	brtc	.+18     	; 0xdb4 <__divmodsi4_exit>
 da2:	0c 94 db 06 	jmp	0xdb6	; 0xdb6 <__negsi2>

00000da6 <__divmodsi4_neg2>:
 da6:	50 95       	com	r21
 da8:	40 95       	com	r20
 daa:	30 95       	com	r19
 dac:	21 95       	neg	r18
 dae:	3f 4f       	sbci	r19, 0xFF	; 255
 db0:	4f 4f       	sbci	r20, 0xFF	; 255
 db2:	5f 4f       	sbci	r21, 0xFF	; 255

00000db4 <__divmodsi4_exit>:
 db4:	08 95       	ret

00000db6 <__negsi2>:
 db6:	90 95       	com	r25
 db8:	80 95       	com	r24
 dba:	70 95       	com	r23
 dbc:	61 95       	neg	r22
 dbe:	7f 4f       	sbci	r23, 0xFF	; 255
 dc0:	8f 4f       	sbci	r24, 0xFF	; 255
 dc2:	9f 4f       	sbci	r25, 0xFF	; 255
 dc4:	08 95       	ret

00000dc6 <__muluhisi3>:
 dc6:	0e 94 f4 06 	call	0xde8	; 0xde8 <__umulhisi3>
 dca:	a5 9f       	mul	r26, r21
 dcc:	90 0d       	add	r25, r0
 dce:	b4 9f       	mul	r27, r20
 dd0:	90 0d       	add	r25, r0
 dd2:	a4 9f       	mul	r26, r20
 dd4:	80 0d       	add	r24, r0
 dd6:	91 1d       	adc	r25, r1
 dd8:	11 24       	eor	r1, r1
 dda:	08 95       	ret

00000ddc <__tablejump2__>:
 ddc:	ee 0f       	add	r30, r30
 dde:	ff 1f       	adc	r31, r31
 de0:	05 90       	lpm	r0, Z+
 de2:	f4 91       	lpm	r31, Z
 de4:	e0 2d       	mov	r30, r0
 de6:	09 94       	ijmp

00000de8 <__umulhisi3>:
 de8:	a2 9f       	mul	r26, r18
 dea:	b0 01       	movw	r22, r0
 dec:	b3 9f       	mul	r27, r19
 dee:	c0 01       	movw	r24, r0
 df0:	a3 9f       	mul	r26, r19
 df2:	70 0d       	add	r23, r0
 df4:	81 1d       	adc	r24, r1
 df6:	11 24       	eor	r1, r1
 df8:	91 1d       	adc	r25, r1
 dfa:	b2 9f       	mul	r27, r18
 dfc:	70 0d       	add	r23, r0
 dfe:	81 1d       	adc	r24, r1
 e00:	11 24       	eor	r1, r1
 e02:	91 1d       	adc	r25, r1
 e04:	08 95       	ret

00000e06 <abort>:
 e06:	81 e0       	ldi	r24, 0x01	; 1
 e08:	90 e0       	ldi	r25, 0x00	; 0
 e0a:	f8 94       	cli
 e0c:	0c 94 08 07 	jmp	0xe10	; 0xe10 <_exit>

00000e10 <_exit>:
 e10:	f8 94       	cli

00000e12 <__stop_program>:
 e12:	ff cf       	rjmp	.-2      	; 0xe12 <__stop_program>
